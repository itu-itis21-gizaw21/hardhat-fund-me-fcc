{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\n/** @title A contract for crowd funding\n    @author Kaleab A\n    @notice This contract is to demo a sample funding contract\n    @dev This implements the price feeds as our library\n */\n\n\ncontract FundMe {\n    // Type Declarations\n    using PriceConverter for uint256;  \n\n    // State Variables\n    mapping(address => uint256) private addressToAmountFunded;\n    address[] private funders;\n\n    uint256 private constant MINIMUM_USD = 10 * 1e18;\n    address private immutable i_owner;\n\n    AggregatorV3Interface private priceFeed;\n\n    modifier onlyOwner{\n        if(msg.sender != i_owner){\n            revert FundMe__NotOwner();\n        }\n        _;\n    }\n\n    constructor(address priceFeedAddress){\n        i_owner = msg.sender;\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    function fund() public payable{\n        //console.log(msg.value.getConversionRate(priceFeed));\n        require(msg.value.getConversionRate(priceFeed) == MINIMUM_USD,\"Didn't send enough\");\n       // require(1==2,\"are you for real\");\n        funders.push(msg.sender);\n        addressToAmountFunded[msg.sender] = msg.value;\n    }\n\n\n    function withdraw() public onlyOwner{\n        for(uint256 funderIndex=0; funderIndex < funders.length; funderIndex++){\n            address funder = funders[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n\n        // transfer\n        //payable(msg.sender).transfer(address(this).balance);\n        // send\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        //require(sendSuccess,\"Send failed\");\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess,\"Send failed\");\n    }\n   function cheaperWithdraw() public payable onlyOwner() {\n        address[] memory fundersx = funders;\n        for(uint256 funderIndex = 0; funderIndex < fundersx.length; funderIndex++){\n            address funder = fundersx[funderIndex];\n            addressToAmountFunded[funder] = 0;\n        }\n        funders = new address[](0);\n\n        // transfer\n        //payable(msg.sender).transfer(address(this).balance);\n        // send\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\n        //require(sendSuccess,\"Send failed\");\n        // call\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\"\");\n        require(callSuccess,\"Send failed\");\n   }\n\n    function getOwner() public view returns (address){\n        return i_owner;\n    }\n    function getFunder(uint256 index) public view returns(address){\n        return funders[index];\n    }\n    function getAddressToAmountFunded(address funder) public view returns (uint256){\n        return addressToAmountFunded[funder];\n    }\n    function getPricedFeed() public view returns (AggregatorV3Interface){\n        return priceFeed;\n    }\n\n}"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\nlibrary PriceConverter{\n  \n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\n        (,int256 price,,,) = priceFeed.latestRoundData();\n        return uint256(price * 1e10);\n    }\n\n   //  AggregatorV3Interface();\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns(uint256){\n        uint256 ethPrice = getPrice(priceFeed);\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}